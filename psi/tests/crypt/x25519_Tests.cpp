#include "TestHelper.h"
#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <iostream>
#include <set>
#include <sstream>

#include "psi/tools/ByteBuffer.h"
#include "psi/tools/Tools.h"
#include "psi/tools/crypt/x25519.h"

using namespace psi::tools;
using namespace psi::tools::crypt;

TEST(x25519_Tests, scalarmult_base)
{
    {
        SCOPED_TRACE("// case 1. sender keys");
        uint8_t sender_pk[32];
        uint8_t sender_sk[32] = {0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1,
                                 0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0,
                                 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a};

        x25519::scalarmult_base(sender_pk, sender_sk);

        ByteBuffer pkBuffer(32);
        pkBuffer.write(sender_pk);

        uint8_t expectedPk[32] = {0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d,
                                  0xdc, 0xb4, 0x3e, 0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38,
                                  0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0x6a};
        ByteBuffer expected(32);
        expected.write(expectedPk);
        EXPECT_EQ(pkBuffer.asHexString(), expected.asHexString());
    }

    {
        SCOPED_TRACE("// case 2. receiver keys");
        uint8_t receiver_pk[32];
        uint8_t receiver_sk[32] = {0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f,
                                   0x8b, 0x83, 0x80, 0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18,
                                   0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27, 0xff, 0x88, 0xe0, 0xeb};

        x25519::scalarmult_base(receiver_pk, receiver_sk);

        ByteBuffer pkBuffer(32);
        pkBuffer.write(receiver_pk);

        uint8_t expectedPk[32] = {0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61,
                                  0xc2, 0xec, 0xe4, 0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78,
                                  0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14, 0x6f, 0x88, 0x2b, 0x4f};
        ByteBuffer expected(32);
        expected.write(expectedPk);
        EXPECT_EQ(pkBuffer.asHexString(), expected.asHexString());
    }

    {
        SCOPED_TRACE("// case 3. client keys");
        uint8_t client_pk[32];
        uint8_t client_sk[32] = {0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a,
                                 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
                                 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f};

        x25519::scalarmult_base(client_pk, client_sk);

        ByteBuffer pkBuffer(32);
        pkBuffer.write(client_pk);

        uint8_t expectedPk[32] = {0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32,
                                  0x9a, 0xdf, 0x91, 0x21, 0x38, 0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e,
                                  0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54};
        ByteBuffer expected(32);
        expected.write(expectedPk);
        EXPECT_EQ(pkBuffer.asHexString(), expected.asHexString());
    }

    {
        SCOPED_TRACE("// case 4. server keys");
        uint8_t server_pk[32];
        uint8_t server_sk[32] = {0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a,
                                 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5,
                                 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf};

        x25519::scalarmult_base(server_pk, server_sk);

        ByteBuffer pkBuffer(32);
        pkBuffer.write(server_pk);

        uint8_t expectedPk[32] = {0x9f, 0xd7, 0xad, 0x6d, 0xcf, 0xf4, 0x29, 0x8d, 0xd3, 0xf9, 0x6d,
                                  0x5b, 0x1b, 0x2a, 0xf9, 0x10, 0xa0, 0x53, 0x5b, 0x14, 0x88, 0xd7,
                                  0xf8, 0xfa, 0xbb, 0x34, 0x9a, 0x98, 0x28, 0x80, 0xb6, 0x15};
        ByteBuffer expected(32);
        expected.write(expectedPk);
        EXPECT_EQ(pkBuffer.asHexString(), expected.asHexString());
    }
}

TEST(x25519_Tests, scalarmult)
{
    {
        SCOPED_TRACE("// case 1. shared key sender side");
        uint8_t shared_pk[32];
        uint8_t sender_sk[32] = {0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1,
                                 0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0,
                                 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a};
        uint8_t receiver_pk[32] = {0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61,
                                   0xc2, 0xec, 0xe4, 0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78,
                                   0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14, 0x6f, 0x88, 0x2b, 0x4f};

        x25519::scalarmult(shared_pk, sender_sk, receiver_pk);

        ByteBuffer shared_pkBuffer(32);
        shared_pkBuffer.write(shared_pk);
        uint8_t expectedSharedKey[32] = {0x4a, 0x5d, 0x9d, 0x5b, 0xa4, 0xce, 0x2d, 0xe1, 0x72, 0x8e, 0x3b,
                                         0xf4, 0x80, 0x35, 0x0f, 0x25, 0xe0, 0x7e, 0x21, 0xc9, 0x47, 0xd1,
                                         0x9e, 0x33, 0x76, 0xf0, 0x9b, 0x3c, 0x1e, 0x16, 0x17, 0x42};
        ByteBuffer expected(32);
        expected.write(expectedSharedKey);
        EXPECT_EQ(shared_pkBuffer.asHexString(), expected.asHexString());
    }

    {
        SCOPED_TRACE("// case 2. shared key receiver side");
        uint8_t shared_pk[32];
        uint8_t receiver_sk[32] = {0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f,
                                   0x8b, 0x83, 0x80, 0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18,
                                   0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27, 0xff, 0x88, 0xe0, 0xeb};
        uint8_t sender_pk[32] = {0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d,
                                 0xdc, 0xb4, 0x3e, 0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38,
                                 0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0x6a};

        x25519::scalarmult(shared_pk, receiver_sk, sender_pk);

        ByteBuffer shared_pkBuffer(32);
        shared_pkBuffer.write(shared_pk);
        uint8_t expectedSharedKey[32] = {0x4a, 0x5d, 0x9d, 0x5b, 0xa4, 0xce, 0x2d, 0xe1, 0x72, 0x8e, 0x3b,
                                         0xf4, 0x80, 0x35, 0x0f, 0x25, 0xe0, 0x7e, 0x21, 0xc9, 0x47, 0xd1,
                                         0x9e, 0x33, 0x76, 0xf0, 0x9b, 0x3c, 0x1e, 0x16, 0x17, 0x42};
        ByteBuffer expected(32);
        expected.write(expectedSharedKey);
        EXPECT_EQ(shared_pkBuffer.asHexString(), expected.asHexString());
    }

    {
        SCOPED_TRACE("// case 3. shared key client side");
        uint8_t shared_pk[32];
        uint8_t client_sk[32] = {0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a,
                                 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
                                 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f};
        uint8_t server_pk[32] = {0x9f, 0xd7, 0xad, 0x6d, 0xcf, 0xf4, 0x29, 0x8d, 0xd3, 0xf9, 0x6d,
                                 0x5b, 0x1b, 0x2a, 0xf9, 0x10, 0xa0, 0x53, 0x5b, 0x14, 0x88, 0xd7,
                                 0xf8, 0xfa, 0xbb, 0x34, 0x9a, 0x98, 0x28, 0x80, 0xb6, 0x15};

        x25519::scalarmult(shared_pk, client_sk, server_pk);

        ByteBuffer shared_pkBuffer(32);
        shared_pkBuffer.write(shared_pk);
        uint8_t expectedSharedKey[32] = {0xdf, 0x4a, 0x29, 0x1b, 0xaa, 0x1e, 0xb7, 0xcf, 0xa6, 0x93, 0x4b,
                                         0x29, 0xb4, 0x74, 0xba, 0xad, 0x26, 0x97, 0xe2, 0x9f, 0x1f, 0x92,
                                         0x0d, 0xcc, 0x77, 0xc8, 0xa0, 0xa0, 0x88, 0x44, 0x76, 0x24};
        ByteBuffer expected(32);
        expected.write(expectedSharedKey);
        EXPECT_EQ(shared_pkBuffer.asHexString(), expected.asHexString());
    }

    {
        SCOPED_TRACE("// case 4. shared key server side");
        uint8_t shared_pk[32];
        uint8_t server_sk[32] = {0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a,
                                 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5,
                                 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf};
        uint8_t client_pk[32] = {0x35, 0x80, 0x72, 0xd6, 0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32,
                                 0x9a, 0xdf, 0x91, 0x21, 0x38, 0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e,
                                 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2, 0xcd, 0x16, 0x62, 0x54};

        x25519::scalarmult(shared_pk, server_sk, client_pk);

        ByteBuffer shared_pkBuffer(32);
        shared_pkBuffer.write(shared_pk);
        uint8_t expectedSharedKey[32] = {0xdf, 0x4a, 0x29, 0x1b, 0xaa, 0x1e, 0xb7, 0xcf, 0xa6, 0x93, 0x4b,
                                         0x29, 0xb4, 0x74, 0xba, 0xad, 0x26, 0x97, 0xe2, 0x9f, 0x1f, 0x92,
                                         0x0d, 0xcc, 0x77, 0xc8, 0xa0, 0xa0, 0x88, 0x44, 0x76, 0x24};
        ByteBuffer expected(32);
        expected.write(expectedSharedKey);
        EXPECT_EQ(shared_pkBuffer.asHexString(), expected.asHexString());
    }
}
